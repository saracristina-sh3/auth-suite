import api from './api'
import type { ApiResponse } from '@/types/common/api.types'
import type { PaginatedResponse } from '@/types/common/api.types'
import type { User } from '@/types/common/user.types'
import type { AutarquiaWithPivot, UserAutarquiaPivot, SyncAutarquiasPayload } from '@/types/common/use-autarquia-pivot.types'


/**
 * Servi√ßo de gerenciamento de usu√°rios
 *
 * @description Fornece opera√ß√µes CRUD completas para usu√°rios, incluindo
 * gerenciamento de autarquias vinculadas e autarquia ativa.
 *
 * @example
 * // Listar usu√°rios
 * const users = await userService.list({ page: 1, per_page: 10 })
 *
 * // Criar usu√°rio
 * const newUser = await userService.create({
 *   name: 'Jo√£o Silva',
 *   email: 'joao@example.com',
 *   cpf: '12345678900',
 *   password: 'senha123',
 *   role: 'user'
 * })
 */
export const userService = {
  /**
   * Lista todos os usu√°rios com pagina√ß√£o
   *
   * @param {Object} params - Par√¢metros de pagina√ß√£o e filtros
   * @param {number} params.page - N√∫mero da p√°gina (padr√£o: 1)
   * @param {number} params.per_page - Itens por p√°gina (padr√£o: 15)
   * @param {string} params.search - Termo de busca (nome ou email)
   * @param {string} params.role - Filtrar por role (user, admin, superadmin, etc)
   * @param {boolean} params.is_active - Filtrar por status ativo
   *
   * @returns {Promise<PaginatedResponse<User>>} Resposta paginada com usu√°rios
   *
   * @throws {Error} Se a requisi√ß√£o falhar
   *
   * @example
   * const response = await userService.list({
   *   page: 1,
   *   per_page: 10,
   *   search: 'jo√£o',
   *   role: 'admin'
   * })
   * console.log(response.data) // Array de usu√°rios
   * console.log(response.meta) // Metadados de pagina√ß√£o
   */
  async list(params = {}): Promise<PaginatedResponse<User>> {
    try {
      console.log('üîÑ userService.list - Chamando API...')

      const response = await api.get('/users', { params })
      console.log('üì¶ userService.list - Resposta:', response.data)

      return response.data

    } catch (error) {
      console.error('‚ùå Erro no userService.list:', error)
      throw error
    }
  },

  /**
   * Busca um usu√°rio espec√≠fico por ID
   *
   * @param {number} id - ID do usu√°rio
   *
   * @returns {Promise<User>} Usu√°rio encontrado
   *
   * @throws {Error} Se o usu√°rio n√£o for encontrado (404) ou requisi√ß√£o falhar
   *
   * @example
   * const user = await userService.get(1)
   * console.log(user.name) // 'Jo√£o Silva'
   */
  async get(id: number): Promise<User> {
    const response = await api.get(`/users/${id}`)
    return response.data.data
  },

  /**
   * Cria um novo usu√°rio
   *
   * @param {Partial<User>} payload - Dados do novo usu√°rio
   * @param {string} payload.name - Nome completo (obrigat√≥rio)
   * @param {string} payload.email - Email √∫nico (obrigat√≥rio)
   * @param {string} payload.cpf - CPF √∫nico, apenas n√∫meros (obrigat√≥rio)
   * @param {string} payload.password - Senha, m√≠nimo 6 caracteres (obrigat√≥rio)
   * @param {string} payload.role - Role do usu√°rio (user, admin, superadmin, etc)
   * @param {number[]} payload.autarquias - IDs das autarquias vinculadas
   * @param {number} payload.autarquia_preferida_id - ID da autarquia padr√£o
   * @param {boolean} payload.is_active - Status ativo (padr√£o: true)
   *
   * @returns {Promise<User>} Usu√°rio criado
   *
   * @throws {Error} Se valida√ß√£o falhar ou requisi√ß√£o falhar
   *
   * @example
   * const newUser = await userService.create({
   *   name: 'Jo√£o Silva',
   *   email: 'joao@example.com',
   *   cpf: '12345678900',
   *   password: 'senha123',
   *   role: 'user',
   *   autarquias: [1, 2],
   *   autarquia_preferida_id: 1,
   *   is_active: true
   * })
   */
  async create(payload: Partial<User>): Promise<User> {
    const response = await api.post('/users', payload)
    return response.data.data
  },

  /**
   * Atualiza um usu√°rio existente
   *
   * @param {number} id - ID do usu√°rio a ser atualizado
   * @param {Partial<User>} payload - Dados a serem atualizados
   * @param {string} payload.name - Nome completo
   * @param {string} payload.email - Email √∫nico
   * @param {string} payload.cpf - CPF √∫nico, apenas n√∫meros
   * @param {string} payload.password - Nova senha (opcional, s√≥ atualiza se fornecida)
   * @param {string} payload.role - Role do usu√°rio
   * @param {number[]} payload.autarquias - IDs das autarquias vinculadas
   * @param {number} payload.autarquia_preferida_id - ID da autarquia padr√£o
   * @param {boolean} payload.is_active - Status ativo
   *
   * @returns {Promise<User>} Usu√°rio atualizado
   *
   * @throws {Error} Se o usu√°rio n√£o for encontrado ou valida√ß√£o falhar
   *
   * @example
   * const updatedUser = await userService.update(1, {
   *   name: 'Jo√£o Silva Atualizado',
   *   email: 'joao.novo@example.com'
   * })
   */
  async update(id: number, payload: Partial<User>): Promise<User> {
    const response = await api.put(`/users/${id}`, payload)
    return response.data.data
  },

  /**
   * Remove um usu√°rio
   *
   * @param {number} id - ID do usu√°rio a ser removido
   *
   * @returns {Promise<void>}
   *
   * @throws {Error} Se o usu√°rio n√£o for encontrado ou n√£o puder ser removido
   *
   * @example
   * await userService.remove(1)
   */
  async remove(id: number): Promise<void> {
    await api.delete(`/users/${id}`)
  },

  // ====================================
  // M√âTODOS DE GEST√ÉO DE AUTARQUIAS
  // ====================================

  /**
   * Busca todas as autarquias vinculadas a um usu√°rio espec√≠fico
   *
   * @param userId - ID do usu√°rio
   * @returns Array de autarquias com dados da pivot
   *
   * @example
   * const autarquias = await userService.getUserAutarquias(1)
   * console.log(autarquias[0].pivot.role) // 'admin'
   */
  async getUserAutarquias(userId: number): Promise<AutarquiaWithPivot[]> {
    try {
      console.log(`üîÑ userService.getUserAutarquias - Buscando autarquias do usu√°rio ${userId}...`)

      const response = await api.get<ApiResponse<AutarquiaWithPivot[]>>(`/users/${userId}/autarquias`)
      console.log('üì¶ userService.getUserAutarquias - Resposta:', response.data)

      return response.data.data || []

    } catch (error) {
      console.error('‚ùå Erro ao buscar autarquias do usu√°rio:', error)
      throw error
    }
  },

  /**
   * Anexa uma ou mais autarquias a um usu√°rio
   *
   * @param userId - ID do usu√°rio
   * @param autarquiaIds - Array de IDs das autarquias a serem anexadas
   * @param pivotData - Dados opcionais para a tabela pivot (role, is_admin, etc.)
   *
   * @example
   * await userService.attachAutarquias(1, [1, 2, 3], {
   *   role: 'admin',
   *   is_admin: true,
   *   ativo: true
   * })
   */
  async attachAutarquias(
    userId: number,
    autarquiaIds: number[],
    pivotData?: Partial<UserAutarquiaPivot>
  ): Promise<void> {
    try {
      console.log(`üîÑ userService.attachAutarquias - Anexando autarquias ao usu√°rio ${userId}...`)

      const payload = {
        autarquia_ids: autarquiaIds,
        pivot_data: pivotData || {}
      }

      const response = await api.post<ApiResponse<void>>(
        `/users/${userId}/autarquias/attach`,
        payload
      )

      console.log('‚úÖ userService.attachAutarquias - Sucesso:', response.data.message)

    } catch (error) {
      console.error('‚ùå Erro ao anexar autarquias:', error)
      throw error
    }
  },

  /**
   * Desanexa uma ou mais autarquias de um usu√°rio
   *
   * @param userId - ID do usu√°rio
   * @param autarquiaIds - Array de IDs das autarquias a serem desanexadas
   *
   * @example
   * await userService.detachAutarquias(1, [1, 2])
   */
  async detachAutarquias(userId: number, autarquiaIds: number[]): Promise<void> {
    try {
      console.log(`üîÑ userService.detachAutarquias - Desanexando autarquias do usu√°rio ${userId}...`)

      const payload = {
        autarquia_ids: autarquiaIds
      }

      const response = await api.post<ApiResponse<void>>(
        `/users/${userId}/autarquias/detach`,
        payload
      )

      console.log('‚úÖ userService.detachAutarquias - Sucesso:', response.data.message)

    } catch (error) {
      console.error('‚ùå Erro ao desanexar autarquias:', error)
      throw error
    }
  },

  /**
   * Sincroniza as autarquias de um usu√°rio
   * Remove todas as autarquias existentes e adiciona apenas as fornecidas
   *
   * @param userId - ID do usu√°rio
   * @param autarquias - Array de objetos com id da autarquia e dados da pivot
   *
   * @example
   * await userService.syncAutarquias(1, [
   *   { id: 1, pivot_data: { role: 'admin', is_admin: true } },
   *   { id: 2, pivot_data: { role: 'user', is_admin: false } }
   * ])
   */
  async syncAutarquias(
    userId: number,
    autarquias: SyncAutarquiasPayload[]
  ): Promise<void> {
    try {
      console.log(`üîÑ userService.syncAutarquias - Sincronizando autarquias do usu√°rio ${userId}...`)

      const payload = {
        autarquias: autarquias
      }

      const response = await api.post<ApiResponse<void>>(
        `/users/${userId}/autarquias/sync`,
        payload
      )

      console.log('‚úÖ userService.syncAutarquias - Sucesso:', response.data.message)

    } catch (error) {
      console.error('‚ùå Erro ao sincronizar autarquias:', error)
      throw error
    }
  },

  /**
   * Atualiza a autarquia ativa de um usu√°rio
   *
   * @param userId - ID do usu√°rio
   * @param autarquiaId - ID da autarquia a ser definida como ativa
   *
   * @example
   * await userService.updateActiveAutarquia(1, 5)
   */
  async updateActiveAutarquia(userId: number, autarquiaId: number): Promise<void> {
    try {
      console.log(`üîÑ userService.updateActiveAutarquia - Atualizando autarquia ativa do usu√°rio ${userId}...`)

      const payload = {
        autarquia_ativa_id: autarquiaId
      }

      const response = await api.put<ApiResponse<void>>(
        `/users/${userId}/active-autarquia`,
        payload
      )

      console.log('‚úÖ userService.updateActiveAutarquia - Sucesso:', response.data.message)

    } catch (error) {
      console.error('‚ùå Erro ao atualizar autarquia ativa:', error)
      throw error
    }
  },

  /**
   * Retorna estat√≠sticas dos usu√°rios
   *
   * @returns {Promise<Object>} Estat√≠sticas dos usu√°rios
   * @returns {number} return.total - Total de usu√°rios
   * @returns {number} return.ativos - Usu√°rios ativos
   * @returns {number} return.inativos - Usu√°rios inativos
   * @returns {number} return.superadmins - Usu√°rios superadmin
   *
   * @throws {Error} Se a requisi√ß√£o falhar
   *
   * @example
   * const stats = await userService.getStats()
   * console.log(`Total: ${stats.total}, Ativos: ${stats.ativos}`)
   */
  async getStats(): Promise<{ total: number; ativos: number; inativos: number; superadmins: number }> {
    const response = await api.get<{ data: { total: number; ativos: number; inativos: number; superadmins: number } }>('/users/stats')
    return response.data.data
  },
}
